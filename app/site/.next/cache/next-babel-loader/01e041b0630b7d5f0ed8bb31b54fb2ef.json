{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport SectionTitle from '../components/section-title';\nimport { UnderlinedTabs } from '../components/tabs';\nimport Widget from '../components/widget';\nimport Link from 'next/link'; // import AccountLinks from './account-links'\n// import {FiSettings, FiHeart, FiMenu} from 'react-icons/fi'\n// import {FiPlus} from 'react-icons/fi'\n// import SectionTitle from '../components/section-title'\n// import Modal1 from '../components/modals/modal-1'\n// import Link from 'next/link'\n// \n// import React, {useState, useEffect, useRef} from 'react'\n\nimport { useSelector, shallowEqual } from 'react-redux';\nimport Portal from '../components/portal';\nimport { FiX } from 'react-icons/fi';\nimport { useRouter } from 'next/router';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport fetchData from \"../api/api\";\nimport Datetime from 'react-datetime';\nconst tabs = [{\n  index: 0,\n  title: 'Home',\n  active: true,\n  url: '/'\n}, {\n  index: 1,\n  title: 'About Us',\n  active: false,\n  url: '/about'\n}, {\n  index: 2,\n  title: 'Facilities',\n  active: false,\n  url: '/facilities'\n}, {\n  index: 3,\n  title: 'Departments',\n  active: false,\n  url: '/departments'\n}, {\n  index: 4,\n  title: 'Education',\n  active: false,\n  url: '/education'\n}, {\n  index: 5,\n  title: 'Insurance',\n  active: false,\n  url: '/insurance'\n}, {\n  index: 6,\n  title: 'Health Plan',\n  active: false,\n  url: '/health-plan'\n}, {\n  index: 7,\n  title: 'Career',\n  active: false,\n  url: '/career'\n}, {\n  index: 8,\n  title: 'Contact Us',\n  active: false,\n  url: '/contact-us'\n}];\n\nconst Index = ({\n  title,\n  body\n}) => {\n  let router = useRouter();\n  let {\n    0: name,\n    1: setname\n  } = useState(''),\n      {\n    0: name_err,\n    1: setname_err\n  } = useState(false),\n      {\n    0: clicked,\n    1: setclicked\n  } = useState(false),\n      {\n    0: email,\n    1: setemail\n  } = useState(''),\n      {\n    0: email_err,\n    1: setemail_err\n  } = useState(false),\n      {\n    0: phone,\n    1: setphone\n  } = useState(''),\n      {\n    0: phone_err,\n    1: setphone_err\n  } = useState(false),\n      {\n    0: gender,\n    1: setgender\n  } = useState(''),\n      {\n    0: gender_err,\n    1: setgender_err\n  } = useState(false),\n      {\n    0: age,\n    1: setage\n  } = useState(''),\n      {\n    0: age_err,\n    1: setage_err\n  } = useState(false),\n      {\n    0: date,\n    1: setdate\n  } = useState(''),\n      {\n    0: time,\n    1: settime\n  } = useState(''),\n      {\n    0: time_err,\n    1: settime_err\n  } = useState(false),\n      {\n    0: department_arr,\n    1: setdepartment_arr\n  } = useState(false),\n      {\n    0: department_id,\n    1: setdepartment_id\n  } = useState(''),\n      {\n    0: department_id_err,\n    1: setdepartment_id_err\n  } = useState(false),\n      {\n    0: appoinment_date_err,\n    1: setappoinment_date_err\n  } = useState(false),\n      {\n    0: appoinment_date,\n    1: setappoinment_date\n  } = useState(new Date());\n\n  let onChange = (e, name) => {\n    if (String(name) === String('name')) {\n      if (!e.target.value) {\n        setname_err(true);\n      } else {\n        setname_err(false);\n      }\n\n      setname(e.target.value);\n    }\n\n    if (String(name) === String('email')) {\n      if (!e.target.value) {\n        setemail_err(true);\n      } else {\n        setemail_err(false);\n      }\n\n      setemail(e.target.value);\n    }\n\n    if (String(name) === String('phone')) {\n      if (!e.target.value) {\n        setphone_err(true);\n      } else {\n        setphone_err(false);\n      }\n\n      setphone(e.target.value);\n    }\n\n    if (String(name) === String('gender')) {\n      if (!e.target.value) {\n        setgender_err(true);\n      } else {\n        setgender_err(false);\n      }\n\n      setgender(e.target.value);\n    }\n\n    if (String(name) === String('age')) {\n      if (!e.target.value) {\n        setage_err(true);\n      } else {\n        setage_err(false);\n      }\n\n      setage(e.target.value);\n    }\n\n    if (String(name) === String('date')) {\n      if (!e.target.value) {\n        setdate_err(true);\n      } else {\n        setdate_err(false);\n      }\n\n      setdate(e.target.value);\n    }\n\n    if (String(name) === String('appoinment_date')) {\n      if (!e) {\n        setappoinment_date_err(true);\n      } else {\n        setappoinment_date_err(false);\n      }\n\n      setappoinment_date(e);\n    }\n\n    if (String(name) === String('time')) {\n      if (!e.target.value) {\n        settime_err(true);\n      } else {\n        settime_err(false);\n      }\n\n      settime(e.target.value);\n    }\n\n    if (String(name) === String('department_id')) {\n      if (!e.target.value) {\n        setdepartment_id_err(true);\n      } else {\n        setdepartment_id_err(false);\n      }\n\n      setdepartment_id(e.target.value);\n    }\n\n    if (String(name) === String('appoinment_date')) {\n      if (!e) {\n        setappoinment_date_err(true);\n      } else {\n        setappoinment_date_err(false);\n      }\n\n      setappoinment_date(e);\n    }\n  };\n\n  let submit = e => {\n    e.preventDefault();\n\n    if (!name) {\n      setname_err(true);\n      return toast.error('Name is required');\n    }\n\n    if (!email) {\n      setemail_err(true);\n      return toast.error('Email is required');\n    }\n\n    if (!phone) {\n      setphone_err(true);\n      return toast.error('Phone is required');\n    }\n\n    if (!gender) {\n      setgender_err(true);\n      return toast.error('Gender is required');\n    }\n\n    if (!age) {\n      setage_err(true);\n      return toast.error('Age is required');\n    }\n\n    if (!time) {\n      settime_err(true);\n      return toast.error('Time is required');\n    }\n\n    if (name_err) {\n      return toast.error('Name is required');\n    }\n\n    if (email_err) {\n      return toast.error('Email is required');\n    }\n\n    if (phone_err) {\n      return toast.error('Phone is required');\n    }\n\n    if (gender_err) {\n      return toast.error('Gender is required');\n    }\n\n    if (age_err) {\n      return toast.error('Age is required');\n    }\n\n    if (time_err) {\n      return toast.error('Time is required');\n    }\n\n    if (department_id_err) {\n      return toast.error('department_id is required');\n    }\n\n    if (!appoinment_date) {\n      setappoinment_date_err(true);\n      return toast.error('Appoinment Date is required');\n    }\n\n    if (appoinment_date_err) {\n      return toast.error('Appoinment Date is required');\n    }\n\n    setclicked(true);\n    let data = {\n      department_id,\n      name,\n      email,\n      phone,\n      gender,\n      age,\n      date,\n      time,\n      appoinment_date\n    };\n    let response = fetchData('/site/submit/appointments/details', 'post', data);\n    response.then(res => {\n      setclicked(false);\n\n      if (res && res.data && +res.data.status === 0) {\n        if (res.data.errors && res.data.errors.length > 0 && Array.isArray(res.data.errors)) {\n          res.data.errors.map(item => {\n            return toast.error(item.msg);\n          });\n        } else {\n          toast.error(res.data.response);\n        }\n      } else {\n        if (res && res.data && +res.data.status === 1) {\n          toast.success(res.data.response);\n          setOpen(false);\n          setTimeout(() => {\n            setname('');\n            setemail('');\n            setname_err(false);\n            setemail_err(false);\n            setphone('');\n            setphone_err(false);\n            setgender('');\n            setgender_err(false);\n            setage('');\n            setage_err(false);\n            setappoinment_date_err(false);\n            settime('');\n            settime_err(false);\n            setdepartment_id('');\n            setdepartment_id_err(false);\n          }, 1000);\n        }\n      }\n    }).catch(err => {\n      console.log(\"err\", err);\n      setOpen(false);\n    });\n  };\n\n  const {\n    palettes\n  } = useSelector(state => ({\n    palettes: state.palettes\n  }), shallowEqual);\n\n  let {\n    background\n  } = _objectSpread({}, palettes);\n\n  const modalRef = useRef(null);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n\n  const show = () => {\n    router.push({\n      pathname: '/appoinment'\n    }); // setOpen(true)\n  };\n\n  const hide = () => {\n    setOpen(false);\n  };\n\n  let get_department = () => {\n    let response = fetchData('/site/department/list', 'post', {});\n    response.then(res => {\n      if (res && res.data && +res.data.status === 0) {\n        if (res.data.errors && res.data.errors.length > 0 && Array.isArray(res.data.errors)) {\n          res.data.errors.map(item => {\n            return toast.error(item.msg);\n          });\n        } else {\n          setdepartment_arr([]);\n        }\n      } else {\n        if (res && res.data && +res.data.status === 1) {\n          setdepartment_arr(res.data.response && res.data.response.length > 0 ? res.data.response : []);\n        }\n      }\n    }).catch(err => {\n      console.log(\"err\", err);\n    });\n  };\n\n  useEffect(() => {\n    get_department();\n\n    const handleClickOutside = event => {\n      if (!modalRef || !modalRef.current) return false;\n      console.log(modalRef.current.contains(event.target));\n\n      if (!open || modalRef.current.contains(event.target)) {\n        return false;\n      }\n\n      setOpen(!open);\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [open, modalRef]);\n  return __jsx(React.Fragment, null, __jsx(ToastContainer, {\n    position: \"top-right\",\n    autoClose: 2500,\n    closeOnClick: true\n  }), __jsx(Widget, null, __jsx(\"div\", {\n    className: \"flex flex-wrap\"\n  }, __jsx(\"div\", {\n    className: \"w-full\"\n  }, __jsx(UnderlinedTabs, {\n    tabs: tabs\n  }))), __jsx(\"button\", {\n    className: \"btn btn-default btn-rounded bg-blue-500 hover:bg-blue-600 text-white\",\n    type: \"button\",\n    onClick: show\n  }, __jsx(\"i\", {\n    className: \"fa fa-bell-o\"\n  }), \"Appointment\")), open && __jsx(Portal, {\n    selector: \"#portal\"\n  }, __jsx(\"div\", {\n    className: \"modal-backdrop fade-in\"\n  }), __jsx(\"div\", {\n    className: `modal show ${background === 'dark' ? 'dark-mode' : ''}`,\n    \"data-background\": background\n  }, __jsx(\"div\", {\n    className: \"relative min-w-sm w-auto mx-auto lg:max-w-5xl\",\n    ref: modalRef\n  }, __jsx(\"div\", {\n    className: \"modal-content\"\n  }, __jsx(\"div\", {\n    className: \"modal-header\"\n  }, __jsx(\"h3\", {\n    className: \"text-xl font-semibold\"\n  }, \"BOOK YOUR APPOINTMENT\"), __jsx(\"button\", {\n    className: \"modal-close btn btn-transparent\",\n    onClick: hide\n  }, __jsx(FiX, {\n    size: 18,\n    className: \"stroke-current\"\n  }))), __jsx(\"div\", {\n    className: \"relative p-4 flex-auto\"\n  }, __jsx(\"div\", null, __jsx(\"form\", null, __jsx(\"div\", {\n    className: \"flex flex-col lg:flex-row lg:flex-wrap lg:w-1/2\"\n  }, __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: `form-input form-input-${name_err ? 'invalid' : 'valid'}`,\n    placeholder: \"name\",\n    value: name,\n    onChange: e => onChange(e, 'name')\n  }), name_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \" Name is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"input\", {\n    type: \"email\",\n    className: `form-input form-input-${email_err ? 'invalid' : 'valid'}`,\n    placeholder: \"email\",\n    value: email,\n    onChange: e => onChange(e, 'email')\n  }), email_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \" Email is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"input\", {\n    type: \"number\",\n    className: `form-input form-input-${phone_err ? 'invalid' : 'valid'}`,\n    placeholder: \"Phone Number\",\n    value: phone,\n    onChange: e => onChange(e, 'phone')\n  }), phone_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \"phone is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"select\", {\n    name: \"gender\",\n    value: gender,\n    onChange: e => onChange(e, 'gender'),\n    className: `form-input form-input-${gender_err ? 'invalid' : 'valid'}`\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Gender\"), __jsx(\"option\", {\n    value: \"1\"\n  }, \"Male\"), __jsx(\"option\", {\n    value: \"2\"\n  }, \"Female\")), gender_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \"Gender is required\") : null)), __jsx(\"div\", {\n    className: \"w-full\"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"input\", {\n    type: \"text\",\n    className: `form-input form-input-${age_err ? 'invalid' : 'valid'}`,\n    placeholder: \"Age\",\n    value: age,\n    onChange: e => onChange(e, 'age')\n  }), age_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \"Age is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"select\", {\n    name: \"department_id\",\n    value: department_id,\n    onChange: e => onChange(e, 'department_id'),\n    className: `form-input form-input-${department_id_err ? 'invalid' : 'valid'}`\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Choose Department\"), department_arr && department_arr.length > 0 ? department_arr.map((item, index) => {\n    return __jsx(React.Fragment, null, __jsx(\"option\", {\n      key: index,\n      value: item._id\n    }, item.name));\n  }) : null), department_id_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \"Department is required\") : null)), __jsx(\"div\", {\n    className: \"w-full mt-3 mb-6\"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"div\", {\n    className: \"form-label\"\n  }, \"Appoinment Date \", __jsx(\"span\", {\n    className: \"form-error\"\n  }, \"*\")), __jsx(Datetime, {\n    className: `form-input form-input-${appoinment_date_err ? 'invalid' : 'valid'}`,\n    value: appoinment_date,\n    defaultValue: new Date(),\n    dateFormat: \"DD-MM-YYYY\",\n    timeFormat: false,\n    input: true,\n    inputProps: {\n      className: 'form-input',\n      placeholder: 'Select date'\n    },\n    viewMode: 'days',\n    onChange: e => onChange(e, 'appoinment_date')\n  }), appoinment_date_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \"Posting Date is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"select\", {\n    name: \"time\",\n    value: time,\n    onChange: e => onChange(e, 'time'),\n    className: `form-input form-input-${time_err ? 'invalid' : 'valid'}`\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Time\"), __jsx(\"option\", {\n    value: \"8:00 AM\"\n  }, \"8 : 00 AM\"), __jsx(\"option\", {\n    value: \"10:00 AM\"\n  }, \"10 : 00 AM\"), __jsx(\"option\", {\n    value: \"12:00 PM\"\n  }, \"12 : 00 PM\"), __jsx(\"option\", {\n    value: \"2:00 PM\"\n  }, \"2 : 00 PM\"), __jsx(\"option\", {\n    value: \"4:00 PM\"\n  }, \"4 : 00 PM\"), __jsx(\"option\", {\n    value: \"6:00 PM\"\n  }, \"6 : 00 PM\"), __jsx(\"option\", {\n    value: \"8:00 PM\"\n  }, \"8 : 00 PM\"), __jsx(\"option\", {\n    value: \"10:00 PM\"\n  }, \"10 : 00 PM\")), time_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \"Time is required\") : null))), __jsx(\"button\", {\n    className: \"btn btn-default bg-blue-500 hover:bg-blue-600 text-white btn-rounded\",\n    onClick: e => submit(e),\n    disabled: clicked\n  }, \"Submit\", \" \"), ' '))))))));\n};\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}