{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default function dashboard(state = {\n  value: 0,\n  conversions: {}\n}, action) {\n  switch (action.type) {\n    case 'SET_DASHBOARD':\n      let {\n        key,\n        value\n      } = _objectSpread({}, action);\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [`${key}`]: value\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/outside pro/git new/app/site/src/reducers/dashboard.js"],"names":["dashboard","state","value","conversions","action","type","key"],"mappings":";;;;;;AAAA,eAAe,SAASA,SAAT,CACbC,KAAK,GAAG;AACNC,EAAAA,KAAK,EAAE,CADD;AAENC,EAAAA,WAAW,EAAE;AAFP,CADK,EAKbC,MALa,EAMb;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,UAAI;AAACC,QAAAA,GAAD;AAAMJ,QAAAA;AAAN,4BAAmBE,MAAnB,CAAJ;;AACA,6CACKH,KADL;AAEE,SAAE,GAAEK,GAAI,EAAR,GAAYJ;AAFd;;AAIF;AACE,aAAOD,KAAP;AARJ;AAUD","sourcesContent":["export default function dashboard(\r\n  state = {\r\n    value: 0,\r\n    conversions: {}\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case 'SET_DASHBOARD':\r\n      let {key, value} = {...action}\r\n      return {\r\n        ...state,\r\n        [`${key}`]: value\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}