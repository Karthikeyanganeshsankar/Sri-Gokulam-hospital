{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Widget from '../components/widget';\nimport fetchData from \"../api/api\";\nimport CONFIG from \"../api/base_url\";\nimport SectionTitle from '../components/section-title';\nimport { useRouter } from 'next/router';\nimport { withRouter } from 'next/router';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { FiEye, FiEdit, FiTrash, FiX, FiSearch, FiToggleLeft, FiToggleRight } from 'react-icons/fi';\nimport axios from \"axios\";\nimport stringify from 'json-stringify-safe';\n\nconst JObPreview = () => {\n  let router = useRouter();\n  let {\n    0: job,\n    1: setjob\n  } = useState(''),\n      {\n    0: view_obj,\n    1: setview_obj\n  } = useState({}),\n      {\n    0: view_show,\n    1: setview_show\n  } = useState(false);\n  let {\n    0: applyname,\n    1: setapplyname\n  } = useState(''),\n      {\n    0: applyname_err,\n    1: setapplyname_err\n  } = useState(false),\n      {\n    0: applyemail,\n    1: setapplyemail\n  } = useState(''),\n      {\n    0: applyemail_err,\n    1: setapplyemail_err\n  } = useState(false),\n      {\n    0: applyphone,\n    1: setapplyphone\n  } = useState(''),\n      {\n    0: applyphone_err,\n    1: setapplyphone_err\n  } = useState(false),\n      {\n    0: applyqualification,\n    1: setapplyqualification\n  } = useState(''),\n      {\n    0: applyqualification_err,\n    1: setapplyqualification_err\n  } = useState(false),\n      {\n    0: applycategoryname,\n    1: setapplycategoryname\n  } = useState(''),\n      {\n    0: applycategoryname_err,\n    1: setapplycategoryname_err\n  } = useState(false),\n      {\n    0: applycategoryid,\n    1: setapplycategoryid\n  } = useState(''),\n      {\n    0: applycategoryid_err,\n    1: setapplycategoryid_err\n  } = useState(false),\n      {\n    0: applycovernotes,\n    1: setapplycovernotes\n  } = useState(''),\n      {\n    0: applycovernotes_err,\n    1: setapplycovernotes_err\n  } = useState(false),\n      {\n    0: applyjobid,\n    1: setapplyjobid\n  } = useState(''),\n      {\n    0: show_skills_data,\n    1: setshow_skills\n  } = useState(''),\n      {\n    0: clicked,\n    1: setclicked\n  } = useState(false),\n      {\n    0: selectedFile,\n    1: setselectedFile\n  } = useState(''),\n      {\n    0: selectedFile_name,\n    1: setselectedFile_name\n  } = useState(false),\n      {\n    0: applyfile,\n    1: setapplyfile\n  } = useState(''),\n      {\n    0: applyfile_err,\n    1: setapplyfile_err\n  } = useState(false);\n  const {\n    palettes\n  } = useSelector(state => ({\n    palettes: state.palettes\n  }), shallowEqual);\n\n  let {\n    background\n  } = _objectSpread({}, palettes);\n\n  let applyonChange = (e, name) => {\n    if (String(name) === String('applyname')) {\n      if (!e.target.value) {\n        setapplyname_err(true);\n      } else {\n        setapplyname_err(false);\n      }\n\n      setapplyname(e.target.value);\n    }\n\n    if (String(name) === String('applyemail')) {\n      if (!e.target.value) {\n        setapplyemail_err(true);\n      } else {\n        setapplyemail_err(false);\n      }\n\n      setapplyemail(e.target.value);\n    }\n\n    if (String(name) === String('applyphone')) {\n      if (!e.target.value) {\n        setapplyphone_err(true);\n      } else {\n        setapplyphone_err(false);\n      }\n\n      setapplyphone(e.target.value);\n    }\n\n    if (String(name) === String('applyqualification')) {\n      if (!e.target.value) {\n        setapplyqualification_err(true);\n      } else {\n        setapplyqualification_err(false);\n      }\n\n      setapplyqualification(e.target.value);\n    }\n\n    if (String(name) === String('applycovernotes')) {\n      if (!e.target.value) {\n        setapplycovernotes_err(true);\n      } else {\n        setapplycovernotes_err(false);\n      }\n\n      setapplycovernotes(e.target.value);\n    }\n  }; //   const router = useRouter();\n\n\n  const jobs_id = router.query.job_id;\n\n  let apply_submit = e => {\n    e.preventDefault();\n\n    if (!applycategoryname) {\n      setapplycategoryname_err(true);\n      return toast.error('Category is required');\n    }\n\n    if (applycategoryname_err) {\n      return toast.error('Category is required');\n    }\n\n    if (!applyname) {\n      setapplyname_err(true);\n      return toast.error('Name is required');\n    }\n\n    if (applyname_err) {\n      return toast.error('Name is required');\n    }\n\n    if (!applyemail) {\n      setapplyemail_err(true);\n      return toast.error('Email is required');\n    }\n\n    if (applyemail_err) {\n      return toast.error('Email is required');\n    }\n\n    if (!applyqualification) {\n      setapplyqualification_err(true);\n      return toast.error('Qualification is required');\n    }\n\n    if (applyqualification_err) {\n      return toast.error('Qualification is required');\n    }\n\n    if (!applyphone) {\n      setapplyphone_err(true);\n      return toast.error('Phone is required');\n    }\n\n    if (applyphone_err) {\n      return toast.error('Phone is required');\n    }\n\n    if (!applycovernotes) {\n      setapplycovernotes_err(true);\n      return toast.error('Cover notes is required');\n    }\n\n    if (applycovernotes_err) {\n      return toast.error('Cover notes is required');\n    }\n\n    let data = {\n      applyname,\n      applyemail,\n      applyphone,\n      applyqualification,\n      applycategoryname,\n      applycategoryid,\n      applycovernotes,\n      applyjobid,\n      applyfile\n    };\n    var apply = {};\n    apply.jobs_id = data.applyjobid;\n    apply.category_id = data.applycategoryid;\n    apply.category_name = data.applycategoryname;\n    apply.name = data.applyname;\n    apply.email = data.applyemail;\n    apply.phone = data.applyphone;\n    apply.qualification = data.applyqualification;\n    apply.message = data.applycovernotes;\n    let formData = new FormData();\n    formData.append('data', JSON.stringify(apply));\n    formData.append('file', applyfile);\n    let response = fetchData('/site/apply/jobs', 'post', formData);\n    response.then(res => {\n      if (res && res.data && +res.data.status === 0) {\n        if (res.data.errors && res.data.errors.length > 0 && Array.isArray(res.data.errors)) {\n          res.data.errors.map(item => {\n            return toast.error(item.msg);\n          });\n        } else {\n          toast.error(res.data.response);\n        }\n      } else {\n        if (res && res.data && +res.data.status === 1) {\n          toast.success(res.data.response);\n        }\n\n        setTimeout(() => {\n          setapplyname('');\n          setapplyname_err(false);\n          setapplyemail('');\n          setapplyemail_err(false);\n          setapplyphone('');\n          setapplyphone_err(false);\n          setapplyqualification('');\n          setapplyqualification_err(false);\n          setapplycategoryname('');\n          setapplycategoryname_err(false);\n          setapplycategoryid('');\n          setapplycategoryid_err(false);\n          setapplycovernotes('');\n          setapplycovernotes_err(false);\n          setapplyjobid('');\n          setapplyfile('');\n        }, 1000);\n      }\n    }).catch(err => {\n      console.log(\"err\", err); // return router.push('/admin-login');\n    });\n  };\n\n  let onFileChange = fileChangeEvent => {\n    setapplyfile(fileChangeEvent.target.files[0]);\n  };\n\n  let handleUpload = (e, file) => {\n    e.preventDefault();\n    console.log(\"file--------------\", file); // console.log(\"this.state.selectedFile.name---------------\", this.state.selectedFile.name)\n    // setselectedFile(this.state.selectedFile);\n    // setselectedFile_name(this.state.selectedFile.name);\n    // [selectedFile, setselectedFile] = useState(''),\n    // [selectedFile_name, setselectedFile_name] = useState(false)\n    // const data = new FormData();\n    // data.append('file', this.state.selectedFile, this.state.selectedFile.name);\n    // axios.post(endpoint, data).then((res) => {\n    //   console.log(res.statusText);\n    // });\n  };\n\n  useEffect(() => {\n    var data = {};\n    data.job_id = jobs_id;\n    let response = fetchData('/site/jobs/getjobdetails', 'post', data);\n    response.then(res => {\n      if (res && res.data && +res.data.status === 0) {\n        if (res.data.errors && res.data.errors.length > 0 && Array.isArray(res.data.errors)) {\n          res.data.errors.map(item => {\n            return toast.error(item.msg);\n          });\n        } else {\n          settable_arr([]);\n        }\n      } else {\n        if (res && res.data && +res.data.status === 1) {\n          // setview_obj(res.data.response);\n          setapplycategoryname(res.data.response.name);\n          setapplycategoryid(res.data.response.category_id);\n          setapplyjobid(res.data.response._id);\n        }\n      }\n    }).catch(err => {\n      console.log(\"err\", err);\n    });\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(ToastContainer, {\n    position: \"top-right\",\n    autoClose: 2500,\n    closeOnClick: true\n  }), __jsx(SectionTitle, {\n    title: \"\",\n    subtitle: \"Apply Job\"\n  }), __jsx(Widget, {\n    title: \"\"\n  }, __jsx(\"div\", null, __jsx(\"form\", null, __jsx(\"div\", {\n    className: \"flex flex-col lg:flex-row lg:flex-wrap lg:w-1/2\"\n  }, __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"div\", {\n    className: \"form-label\"\n  }, \"Category\"), __jsx(\"input\", {\n    type: \"text\",\n    className: `form-input form-input-${applycategoryname_err ? 'invalid' : 'valid'}`,\n    placeholder: \"Name\",\n    value: applycategoryname,\n    onChange: e => applyonChange(e, 'applycategoryname'),\n    disabled: true\n  }), applycategoryname_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \" Category is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"div\", {\n    className: \"form-label\"\n  }, \"Name\"), __jsx(\"input\", {\n    type: \"text\",\n    className: `form-input form-input-${applyname_err ? 'invalid' : 'valid'}`,\n    placeholder: \"Name\",\n    value: applyname,\n    onChange: e => applyonChange(e, 'applyname')\n  }), applyname_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \" Name is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"div\", {\n    className: \"form-label\"\n  }, \"Email\"), __jsx(\"input\", {\n    type: \"email\",\n    className: `form-input form-input-${applyemail_err ? 'invalid' : 'valid'}`,\n    placeholder: \"Email\",\n    value: applyemail,\n    onChange: e => applyonChange(e, 'applyemail')\n  }), applyemail_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \" Email is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"div\", {\n    className: \"form-label\"\n  }, \"Qualification\"), __jsx(\"input\", {\n    type: \"text\",\n    className: `form-input form-input-${applyqualification_err ? 'invalid' : 'valid'}`,\n    placeholder: \"Qualification\",\n    value: applyqualification,\n    onChange: e => applyonChange(e, 'applyqualification')\n  }), applyqualification_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \" Qualification is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"div\", {\n    className: \"form-label\"\n  }, \"Phone\"), __jsx(\"input\", {\n    type: \"number\",\n    className: `form-input form-input-${applyphone_err ? 'invalid' : 'valid'}`,\n    placeholder: \"Phone Number\",\n    value: applyphone,\n    onChange: e => applyonChange(e, 'applyphone')\n  }), applyphone_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \"Phone is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"div\", {\n    className: \"form-label\"\n  }, \"Cover Notes\"), __jsx(\"input\", {\n    type: \"text\",\n    className: `form-input form-input-${applycovernotes_err ? 'invalid' : 'valid'}`,\n    placeholder: \"Cover notes\",\n    value: applycovernotes,\n    onChange: e => applyonChange(e, 'applycovernotes')\n  }), applycovernotes_err ? __jsx(\"div\", {\n    className: \"form-error\"\n  }, \"Cover notes is required\") : null)), __jsx(\"div\", {\n    className: \"w-full \"\n  }, __jsx(\"div\", {\n    className: `form-element`\n  }, __jsx(\"div\", {\n    className: \"form-label\"\n  }, \"Resume upload\"), __jsx(\"input\", {\n    type: \"file\",\n    onChange: e => onFileChange(e)\n  })))), __jsx(\"button\", {\n    className: \"btn btn-default bg-blue-500 hover:bg-blue-600 text-white btn-rounded\",\n    onClick: e => apply_submit(e),\n    disabled: clicked\n  }, \"Apply Job\", \" \"), ' '))));\n};\n\nexport default withRouter(JObPreview);","map":null,"metadata":{},"sourceType":"module"}